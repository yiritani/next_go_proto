// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protos/next_go_anex/proto/v1/notification.proto

package proto_v1connect

import (
	v1 "backend/src/_generated/proto/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NotificationServiceName is the fully-qualified name of the NotificationService service.
	NotificationServiceName = "next_go_anex.api.v1.notification.NotificationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NotificationServiceListNotificationProcedure is the fully-qualified name of the
	// NotificationService's ListNotification RPC.
	NotificationServiceListNotificationProcedure = "/next_go_anex.api.v1.notification.NotificationService/ListNotification"
	// NotificationServiceSendNotificationProcedure is the fully-qualified name of the
	// NotificationService's SendNotification RPC.
	NotificationServiceSendNotificationProcedure = "/next_go_anex.api.v1.notification.NotificationService/SendNotification"
)

// NotificationServiceClient is a client for the
// next_go_anex.api.v1.notification.NotificationService service.
type NotificationServiceClient interface {
	ListNotification(context.Context, *connect.Request[v1.ListNotificationRequest]) (*connect.Response[v1.ListNotificationResponse], error)
	SendNotification(context.Context, *connect.Request[v1.ListNotificationRequest]) (*connect.Response[v1.ListNotificationResponse], error)
}

// NewNotificationServiceClient constructs a client for the
// next_go_anex.api.v1.notification.NotificationService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNotificationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NotificationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	notificationServiceMethods := v1.File_protos_next_go_anex_proto_v1_notification_proto.Services().ByName("NotificationService").Methods()
	return &notificationServiceClient{
		listNotification: connect.NewClient[v1.ListNotificationRequest, v1.ListNotificationResponse](
			httpClient,
			baseURL+NotificationServiceListNotificationProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("ListNotification")),
			connect.WithClientOptions(opts...),
		),
		sendNotification: connect.NewClient[v1.ListNotificationRequest, v1.ListNotificationResponse](
			httpClient,
			baseURL+NotificationServiceSendNotificationProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("SendNotification")),
			connect.WithClientOptions(opts...),
		),
	}
}

// notificationServiceClient implements NotificationServiceClient.
type notificationServiceClient struct {
	listNotification *connect.Client[v1.ListNotificationRequest, v1.ListNotificationResponse]
	sendNotification *connect.Client[v1.ListNotificationRequest, v1.ListNotificationResponse]
}

// ListNotification calls next_go_anex.api.v1.notification.NotificationService.ListNotification.
func (c *notificationServiceClient) ListNotification(ctx context.Context, req *connect.Request[v1.ListNotificationRequest]) (*connect.Response[v1.ListNotificationResponse], error) {
	return c.listNotification.CallUnary(ctx, req)
}

// SendNotification calls next_go_anex.api.v1.notification.NotificationService.SendNotification.
func (c *notificationServiceClient) SendNotification(ctx context.Context, req *connect.Request[v1.ListNotificationRequest]) (*connect.Response[v1.ListNotificationResponse], error) {
	return c.sendNotification.CallUnary(ctx, req)
}

// NotificationServiceHandler is an implementation of the
// next_go_anex.api.v1.notification.NotificationService service.
type NotificationServiceHandler interface {
	ListNotification(context.Context, *connect.Request[v1.ListNotificationRequest]) (*connect.Response[v1.ListNotificationResponse], error)
	SendNotification(context.Context, *connect.Request[v1.ListNotificationRequest]) (*connect.Response[v1.ListNotificationResponse], error)
}

// NewNotificationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNotificationServiceHandler(svc NotificationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	notificationServiceMethods := v1.File_protos_next_go_anex_proto_v1_notification_proto.Services().ByName("NotificationService").Methods()
	notificationServiceListNotificationHandler := connect.NewUnaryHandler(
		NotificationServiceListNotificationProcedure,
		svc.ListNotification,
		connect.WithSchema(notificationServiceMethods.ByName("ListNotification")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceSendNotificationHandler := connect.NewUnaryHandler(
		NotificationServiceSendNotificationProcedure,
		svc.SendNotification,
		connect.WithSchema(notificationServiceMethods.ByName("SendNotification")),
		connect.WithHandlerOptions(opts...),
	)
	return "/next_go_anex.api.v1.notification.NotificationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NotificationServiceListNotificationProcedure:
			notificationServiceListNotificationHandler.ServeHTTP(w, r)
		case NotificationServiceSendNotificationProcedure:
			notificationServiceSendNotificationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNotificationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNotificationServiceHandler struct{}

func (UnimplementedNotificationServiceHandler) ListNotification(context.Context, *connect.Request[v1.ListNotificationRequest]) (*connect.Response[v1.ListNotificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("next_go_anex.api.v1.notification.NotificationService.ListNotification is not implemented"))
}

func (UnimplementedNotificationServiceHandler) SendNotification(context.Context, *connect.Request[v1.ListNotificationRequest]) (*connect.Response[v1.ListNotificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("next_go_anex.api.v1.notification.NotificationService.SendNotification is not implemented"))
}
