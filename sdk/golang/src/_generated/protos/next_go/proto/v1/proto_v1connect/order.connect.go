// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protos/next_go/proto/v1/order.proto

package proto_v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "grpc_backend/src/_generated/proto/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OrdersServiceName is the fully-qualified name of the OrdersService service.
	OrdersServiceName = "next_go.api.v1.order.OrdersService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrdersServiceListOrdersProcedure is the fully-qualified name of the OrdersService's ListOrders
	// RPC.
	OrdersServiceListOrdersProcedure = "/next_go.api.v1.order.OrdersService/ListOrders"
	// OrdersServiceCreateOrderProcedure is the fully-qualified name of the OrdersService's CreateOrder
	// RPC.
	OrdersServiceCreateOrderProcedure = "/next_go.api.v1.order.OrdersService/CreateOrder"
)

// OrdersServiceClient is a client for the next_go.api.v1.order.OrdersService service.
type OrdersServiceClient interface {
	ListOrders(context.Context, *connect.Request[v1.ListOrdersRequest]) (*connect.ServerStreamForClient[v1.ListOrdersResponse], error)
	CreateOrder(context.Context, *connect.Request[v1.CreateOrderRequest]) (*connect.Response[v1.CreateOrderResponse], error)
}

// NewOrdersServiceClient constructs a client for the next_go.api.v1.order.OrdersService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrdersServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OrdersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	ordersServiceMethods := v1.File_protos_next_go_proto_v1_order_proto.Services().ByName("OrdersService").Methods()
	return &ordersServiceClient{
		listOrders: connect.NewClient[v1.ListOrdersRequest, v1.ListOrdersResponse](
			httpClient,
			baseURL+OrdersServiceListOrdersProcedure,
			connect.WithSchema(ordersServiceMethods.ByName("ListOrders")),
			connect.WithClientOptions(opts...),
		),
		createOrder: connect.NewClient[v1.CreateOrderRequest, v1.CreateOrderResponse](
			httpClient,
			baseURL+OrdersServiceCreateOrderProcedure,
			connect.WithSchema(ordersServiceMethods.ByName("CreateOrder")),
			connect.WithClientOptions(opts...),
		),
	}
}

// ordersServiceClient implements OrdersServiceClient.
type ordersServiceClient struct {
	listOrders  *connect.Client[v1.ListOrdersRequest, v1.ListOrdersResponse]
	createOrder *connect.Client[v1.CreateOrderRequest, v1.CreateOrderResponse]
}

// ListOrders calls next_go.api.v1.order.OrdersService.ListOrders.
func (c *ordersServiceClient) ListOrders(ctx context.Context, req *connect.Request[v1.ListOrdersRequest]) (*connect.ServerStreamForClient[v1.ListOrdersResponse], error) {
	return c.listOrders.CallServerStream(ctx, req)
}

// CreateOrder calls next_go.api.v1.order.OrdersService.CreateOrder.
func (c *ordersServiceClient) CreateOrder(ctx context.Context, req *connect.Request[v1.CreateOrderRequest]) (*connect.Response[v1.CreateOrderResponse], error) {
	return c.createOrder.CallUnary(ctx, req)
}

// OrdersServiceHandler is an implementation of the next_go.api.v1.order.OrdersService service.
type OrdersServiceHandler interface {
	ListOrders(context.Context, *connect.Request[v1.ListOrdersRequest], *connect.ServerStream[v1.ListOrdersResponse]) error
	CreateOrder(context.Context, *connect.Request[v1.CreateOrderRequest]) (*connect.Response[v1.CreateOrderResponse], error)
}

// NewOrdersServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrdersServiceHandler(svc OrdersServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	ordersServiceMethods := v1.File_protos_next_go_proto_v1_order_proto.Services().ByName("OrdersService").Methods()
	ordersServiceListOrdersHandler := connect.NewServerStreamHandler(
		OrdersServiceListOrdersProcedure,
		svc.ListOrders,
		connect.WithSchema(ordersServiceMethods.ByName("ListOrders")),
		connect.WithHandlerOptions(opts...),
	)
	ordersServiceCreateOrderHandler := connect.NewUnaryHandler(
		OrdersServiceCreateOrderProcedure,
		svc.CreateOrder,
		connect.WithSchema(ordersServiceMethods.ByName("CreateOrder")),
		connect.WithHandlerOptions(opts...),
	)
	return "/next_go.api.v1.order.OrdersService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrdersServiceListOrdersProcedure:
			ordersServiceListOrdersHandler.ServeHTTP(w, r)
		case OrdersServiceCreateOrderProcedure:
			ordersServiceCreateOrderHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrdersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOrdersServiceHandler struct{}

func (UnimplementedOrdersServiceHandler) ListOrders(context.Context, *connect.Request[v1.ListOrdersRequest], *connect.ServerStream[v1.ListOrdersResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("next_go.api.v1.order.OrdersService.ListOrders is not implemented"))
}

func (UnimplementedOrdersServiceHandler) CreateOrder(context.Context, *connect.Request[v1.CreateOrderRequest]) (*connect.Response[v1.CreateOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("next_go.api.v1.order.OrdersService.CreateOrder is not implemented"))
}
